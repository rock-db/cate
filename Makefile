# This Makefile was automatically generated by cate.
# You can build the project simply by running make without any modifications.
# If you find any bugs, please submit a PR or open an issue at: https://github.com/rock-db/cate

CC     := gcc
CFLAGS := -Wall -Wextra -std=c99 -O2 -g
LDLIBS	:=
PROJECT_NAME     := cate
SRCDIRS    :=src
EXTRA_SOURCES :=  external/tomlc99/toml.c
INCLUDE_DIRS :=  include  external/tomlc99/

# Directory settings
OBJDIR     := deps/object
BINDIR     := bin

# Binary output
BINARY     := $(BINDIR)/$(PROJECT_NAME)

# Auto-detect source files from all source directories
SOURCES    := $(foreach dir,$(SRCDIRS),$(wildcard $(dir)/*.c $(dir)/*/*.c))

# Add any extra sources specified
SOURCES    := $(SOURCES) $(EXTRA_SOURCES)

# Generate object file paths
OBJECTS    := $(patsubst %.c,$(OBJDIR)/%.o,$(SOURCES))

# Include directories
INCLUDES   := $(addprefix -I,$(INCLUDE_DIRS))
CFLAGS     += $(INCLUDES)

# For compile reporting with percentage
TOTAL_FILES := $(words $(SOURCES))
CURR_FILE := 0
define compile-progress
	$(eval CURR_FILE := $(shell echo $$(($(CURR_FILE) + 1))))
	$(eval PERCENT := $(shell echo $$(($(CURR_FILE) * 100 / $(TOTAL_FILES)))))
	@echo "[$(PERCENT)%] ($(CURR_FILE)/$(TOTAL_FILES)) Compiling: $1"
endef

# Default targets
.PHONY: all clean rebuild debug release test verbose help info

all: $(BINARY)
	@echo "\nBuild complete: $(BINARY)"

# Create binary executable
$(BINARY): $(OBJECTS)
	@mkdir -p $(BINDIR)
	@echo "\nLinking executable: $(BINARY)"
	@$(CC) $(OBJECTS) -o $@ $(LDLIBS)

# Create object files from sources (unified rule)
$(OBJDIR)/%.o: %.c
	@mkdir -p $(dir $@)
	$(call compile-progress,$<)
	@$(CC) $(CFLAGS) -c $< -o $@

# Cleanup
clean:
	@rm -rf $(OBJDIR) $(BINDIR) deps
	@echo "Cleanup completed"

# Rebuild
rebuild: clean all

# Debug build
debug: CFLAGS += -g -DDEBUG
debug: all

# Release build
release: CFLAGS += -O3 -DNDEBUG
release: all

# Show dependencies
deps:
	@echo "Sources:"
	@echo $(SOURCES)
	@echo ""
	@echo "Source Directories:"
	@echo $(SRCDIRS)
	@echo ""
	@echo "Include Directories:"
	@echo $(INCLUDE_DIRS)
	@echo ""
	@echo "Objects:"
	@echo $(OBJECTS)
	@echo ""
	@echo "Binary:"
	@echo $(BINARY)

# Test build (compile with debug info)
test: CFLAGS += -g -DDEBUG
test: all

# Verbose compilation (for debugging)
verbose: CFLAGS += -v
verbose: all

# Run the program
run: all
	./$(BINARY)

# Help
help:
	@echo "Available targets:"
	@echo "  all       - Build the binary (default)"
	@echo "  clean     - Remove generated files"
	@echo "  rebuild   - Clean and then build all"
	@echo "  debug     - Debug build"
	@echo "  release   - Release build (optimized)"
	@echo "  test      - Build with debug info"
	@echo "  verbose   - Verbose compilation output"
	@echo "  run       - Build and run the program"
	@echo "  deps      - Show dependencies"
	@echo "  help      - Show this help"

# Show project structure
info:
	@echo "Project Structure:"
	@echo "  Source Dirs:      $(SRCDIRS)"
	@echo "  Sources:          $(SOURCES)"
	@echo "  Include Dirs:     $(INCLUDE_DIRS)"
	@echo "  Binary output:    $(BINARY)"
	@echo "  Project name:     $(PROJECT_NAME)"



